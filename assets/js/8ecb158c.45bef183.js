"use strict";(self.webpackChunkflojoy_doc=self.webpackChunkflojoy_doc||[]).push([[2992],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,E=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(E,o(o({ref:t},u),{},{components:n})):r.createElement(E,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},33619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={},o="<<<<<<<< HEAD:docs/nodes/instruments/serial/py_serial/examples/EX1/example.md",l={unversionedId:"nodes/instruments/serial/SERIAL_TIMESERIES/SERIAL_TIMESERIES",id:"nodes/instruments/serial/SERIAL_TIMESERIES/SERIAL_TIMESERIES",title:"<<<<<<<< HEAD:docs/nodes/instruments/serial/py_serial/examples/EX1/example.md",description:"---",source:"@site/docs/nodes/instruments/serial/SERIAL_TIMESERIES/SERIAL_TIMESERIES.md",sourceDirName:"nodes/instruments/serial/SERIAL_TIMESERIES",slug:"/nodes/instruments/serial/SERIAL_TIMESERIES/",permalink:"/nodes/instruments/serial/SERIAL_TIMESERIES/",draft:!1,tags:[],version:"current",frontMatter:{}},s={},p=[{value:"title: Serial Time Series Example",id:"title-serial-time-series-example",level:2},{value:"Setting up the serial device.",id:"setting-up-the-serial-device",level:3},{value:"Loading the app.",id:"loading-the-app",level:3},{value:"CTRLs setup.",id:"ctrls-setup",level:3}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-headdocsnodesinstrumentsserialpy_serialexamplesex1examplemd"},"<<<<<<<< HEAD:docs/nodes/instruments/serial/py_serial/examples/EX1/example.md"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"sidebar_position: 2\nid: SERIAL_TIMESERIES"),(0,a.kt)("h2",{id:"title-serial-time-series-example"},"title: Serial Time Series Example"),(0,a.kt)("p",null,"In this page, we will go through an example of simple data aquisition from a serial device. This example will assume an Arduino is being used although any serial device should work."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"This app requires a serial device such as an Arduino.")),(0,a.kt)("blockquote",null,(0,a.kt)("blockquote",{parentName:"blockquote"},(0,a.kt)("blockquote",{parentName:"blockquote"},(0,a.kt)("blockquote",{parentName:"blockquote"},(0,a.kt)("blockquote",{parentName:"blockquote"},(0,a.kt)("blockquote",{parentName:"blockquote"},(0,a.kt)("blockquote",{parentName:"blockquote"},(0,a.kt)("blockquote",{parentName:"blockquote"},(0,a.kt)("p",{parentName:"blockquote"},"origin/main:docs/nodes/instruments/serial/SERIAL_TIMESERIES/SERIAL_TIMESERIES.md\nThe returned x-axis from the node is time in seconds starting from 0. The y-axis can be anything with n number of columns. Note that if two y axis columns are needed, the SELECT_ARRAY node must be used."))))))))),(0,a.kt)("h3",{id:"setting-up-the-serial-device"},"Setting up the serial device."),(0,a.kt)("p",null,"The serial device should return y-axis data in a comma seperated format. In C++ like an Ardunio uses, the data should be returned like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'print(reading0)\nprint(",")\nprintln(reading1)\n')),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The first data points must be returned with print while last data point must be println or equivalent.")),(0,a.kt)("p",null,"In Python (>3.6) this would appear like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"print(f'{reading0}','{reading1}')\n\n")),(0,a.kt)("p",null,"or"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"print(reading0, ',' , reading1)\n\n")),(0,a.kt)("h3",{id:"loading-the-app"},"Loading the app."),(0,a.kt)("p",null,"Click File -> Load and load the serial.txt file in the apps folder (or add each node seperately). The example app is shown below."),(0,a.kt)("p",null,"The SELECT_ARRAY node chooses which y-axis column to use. If only one column is returned by the serial device, do not use the SELECT_ARRAY node."),(0,a.kt)("h3",{id:"ctrls-setup"},"CTRLs setup."),(0,a.kt)("p",null,"The parameters available for SERIAL are as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"NUM_READINGS (the number of readings that the node will make.)"),(0,a.kt)("li",{parentName:"ul"},"COMPORT (The serial Com port to use.)"),(0,a.kt)("li",{parentName:"ul"},"BAUD_RATE (Default 9600)"),(0,a.kt)("li",{parentName:"ul"},"RECORD_PERIOD (The time between two readings.)")))}d.isMDXComponent=!0}}]);