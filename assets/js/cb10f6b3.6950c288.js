"use strict";(self.webpackChunkflojoy_doc=self.webpackChunkflojoy_doc||[]).push([[2710],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=l(a),u=r,h=d["".concat(p,".").concat(u)]||d[u]||c[u]||i;return a?n.createElement(h,o(o({ref:t},m),{},{components:a})):n.createElement(h,o({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2160:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const i={sidebar_position:2,id:"data-container",title:"Data Container"},o=void 0,s={unversionedId:"custom-nodes/data-container",id:"custom-nodes/data-container",title:"Data Container",description:"To begin writing custom nodes, there are a few requirements that the main function called by the node must satisfy. All nodes in Flojoy must return an instance of the DataContainer class of flojoy-python. There are many types of objects that can be passed to DataContainer, briefly broken down here:",source:"@site/docs/custom-nodes/data-container.md",sourceDirName:"custom-nodes",slug:"/custom-nodes/data-container",permalink:"/custom-nodes/data-container",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"data-container",title:"Data Container"},sidebar:"main",previous:{title:"Intro",permalink:"/custom-nodes/"},next:{title:"Node Manifest",permalink:"/custom-nodes/manifest"}},p={},l=[],m={toc:l};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To begin writing custom nodes, there are a few requirements that the main function called by the node must satisfy. All nodes in Flojoy must return an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"DataContainer")," class of ",(0,r.kt)("inlineCode",{parentName:"p"},"flojoy-python"),". There are many types of objects that can be passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"DataContainer"),", briefly broken down here:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ordered_pair")," : this is the default typing of the ",(0,r.kt)("inlineCode",{parentName:"li"},"DataContainer")," class, consisting of a simple ",(0,r.kt)("inlineCode",{parentName:"li"},"(x,y)")," pair. Here, convention is that ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is those inputs passed to the node, and ",(0,r.kt)("inlineCode",{parentName:"li"},"y")," is the output. If there are multiple inputs to the node, make sure to pass them as a dictionary to ",(0,r.kt)("inlineCode",{parentName:"li"},"DataContainer"),". For example, the built-in addition node returns ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"DataContainer(\n    x = {'a': a, 'b': b},   # a dictionary of both inputs to the node\n    y = numpy.add(a,b)      # add using NumPy to ensure compatibility with all iterable types\n)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ordered_triple")," : this is an intuitive extension of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ordered_pair")," type, allowing for the retention of a third result, ",(0,r.kt)("inlineCode",{parentName:"p"},"z"),".\nNOTE that as of now, there are few nodes that have incorporated this type.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"greyscale")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"dataframe")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"matrix")," : these three types encapsulate the same fundamental object, a 2D array of data. The differentiation is made to ensure clarity during developement (for example, image processing applications should use the ",(0,r.kt)("inlineCode",{parentName:"p"},"greyscale")," type for binary images, not ",(0,r.kt)("inlineCode",{parentName:"p"},"matrix")," which should be reserved for linear algebra operations). A ",(0,r.kt)("inlineCode",{parentName:"p"},"DataContainer")," object of these types can easily be instantiated by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"m")," parameter:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"DataContainer(\n    type = 'matrix',           # specify type at instantiation\n    m = my_processed_matrix,   # the matrix manipulated and returned by the function\n)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"image")," : this data type is reserved for, well, images! These images must be full color (for greyscale images, please use the ",(0,r.kt)("inlineCode",{parentName:"p"},"greyscale")," type above). This means that this type requires four (4) arguments, ",(0,r.kt)("inlineCode",{parentName:"p"},"(r,g,b,a)")," representing the red, blue, green, and alpha of the pixels in the image. These can be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"DataContainer")," class at instantiation just like the above examples.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"scalar")," : the data type reserved for ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Scalar_processor#Scalar_data_type"},"scalar")," items. By scalar, we mean only that the object can be entirely described by a single value ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"c")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"c")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"))))),". While in principle the object passed as the ",(0,r.kt)("inlineCode",{parentName:"p"},"c")," attribute can be anything, please reserve the usage of this type for a truly scalar object.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"file")," : this data type is to pass the file name to the next node. It requires both a ",(0,r.kt)("inlineCode",{parentName:"p"},"file_type")," attribute, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," attribute, which passes the file handle to the next node."))))}c.isMDXComponent=!0}}]);